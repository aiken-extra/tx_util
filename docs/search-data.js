window.Aiken.initSearch([{"doc":"tx_util/builder","title":"build_context","content":"build_context(\n  validity_range: Interval&lt;Int&gt;,\n  redeemer: transaction.Redeemer,\n) -&gt; ScriptContext\n The initial function that serves as the starting point to construct `ScriptContext`\n\n Example,\n ```\n let ctx = after(now) |&gt; build_context(&quot;Redeemer&quot;)\n ```","url":"tx_util/builder.html#build_context"},{"doc":"tx_util/builder","title":"mint_assets","content":"mint_assets(\n  ctx: ScriptContext,\n  policy_id: PolicyId,\n  assets: assets.Value,\n) -&gt; ScriptContext\n Set `Minting(policy_id)` to `ScriptContext.info`\n and `assets` to `ScriptContext.transaction.mint`","url":"tx_util/builder.html#mint_assets"},{"doc":"tx_util/builder","title":"spend_utxo","content":"spend_utxo(\n  ctx: ScriptContext,\n  utxo: OutputReference,\n  datum: Option&lt;Data&gt;,\n) -&gt; ScriptContext\n Set `Spending(utxo, datum)` to `ScriptContext.info`","url":"tx_util/builder.html#spend_utxo"},{"doc":"tx_util/builder","title":"withdraw_stake_rewards","content":"withdraw_stake_rewards(\n  ctx: ScriptContext,\n  credential: address.Credential,\n) -&gt; ScriptContext\n Set `Withdrawing(credential)` to `ScriptContext.info`\n and `[Pair(credential, 0)]` to `ScriptContext.transaction.withdrawals`","url":"tx_util/builder.html#withdraw_stake_rewards"},{"doc":"tx_util/builder","title":"publish_certificate","content":"publish_certificate(\n  ctx: ScriptContext,\n  certificate: Certificate,\n  at: collection.Index,\n) -&gt; ScriptContext\n Set `Publishing(at, certificate)` to `ScriptContext.info`","url":"tx_util/builder.html#publish_certificate"},{"doc":"tx_util/builder","title":"vote_governance","content":"vote_governance(ctx: ScriptContext, voter: governance.Voter) -&gt; ScriptContext\n Set `Voting(voter)` to `ScriptContext.info`\n and `[Pair(voter, [])]` to `ScriptContext.transaction.votes`","url":"tx_util/builder.html#vote_governance"},{"doc":"tx_util/builder","title":"propose_procedure","content":"propose_procedure(\n  ctx: ScriptContext,\n  proposal_procedure: ProposalProcedure,\n  at: collection.Index,\n) -&gt; ScriptContext\n Set `Proposing(at, proposal_procedure)` to `ScriptContext.info`\n and `[proposal_procedure]` to `ScriptContext.transaction.proposal_procedures`","url":"tx_util/builder.html#propose_procedure"},{"doc":"tx_util/builder","title":"set_transaction","content":"set_transaction(ctx: ScriptContext, tx: Transaction) -&gt; ScriptContext\n Set `tx` to `ScriptContext.transaction`","url":"tx_util/builder.html#set_transaction"},{"doc":"tx_util/builder","title":"tx_util/builder","content":" Usage example,\n ```\n test negative_case() fail {\n   // Arrange:\n   let ctx = interval.empty\n     |&gt; build_context(&quot;Redeemer&quot;)\n     |&gt; vote_governance(&quot;VerificationKeyHash&quot; |&gt; StakePool)\n\n   ...\n\n   // tx_util/builder/txn:\n   let tx = ctx.transaction\n     |&gt; add_tx_input(tx_in)\n     |&gt; add_tx_output(tx_out)\n\n   // Assert:\n   ctx\n     |&gt; set_transaction(tx)\n     |&gt; validator.validate.else\n }\n ```","url":"tx_util/builder.html"},{"doc":"tx_util/builder/txn","title":"set_id","content":"set_id(tx: Transaction, id: TransactionId) -&gt; Transaction\n Set `Transaction.id`.\n The default value is `#&quot;0000000000000000000000000000000000000000000000000000000000000000&quot;`","url":"tx_util/builder/txn.html#set_id"},{"doc":"tx_util/builder/txn","title":"set_validity_range","content":"set_validity_range(\n  tx: Transaction,\n  validity_range: ValidityRange,\n) -&gt; Transaction\n Set `Transaction.validity_range`.\n The default value is `interval.everything`","url":"tx_util/builder/txn.html#set_validity_range"},{"doc":"tx_util/builder/txn","title":"set_fee","content":"set_fee(tx: Transaction, fee: assets.Lovelace) -&gt; Transaction\n Set `Transaction.fee`.\n The default value is `0`","url":"tx_util/builder/txn.html#set_fee"},{"doc":"tx_util/builder/txn","title":"add_tx_input","content":"add_tx_input(tx: Transaction, tx_in: transaction.Input) -&gt; Transaction\n Concat `tx_in` to `Transaction.inputs`.\n The new `tx_in` is placed at the end of the list.\n\n Example,\n ```\n let tx_in = new_tx_input(...)\n     |&gt; set_datum_of_tx_input(...)\n     |&gt; attach_ref_script_to_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_input(tx_in)\n ```","url":"tx_util/builder/txn.html#add_tx_input"},{"doc":"tx_util/builder/txn","title":"new_tx_input","content":"new_tx_input(\n  output_reference: OutputReference,\n  address: Address,\n) -&gt; transaction.Input\n Initialize a transaction input with zero assets value, no datum, and no reference script.\n\n Example,\n ```\n let output_reference = OutputReference(#&quot;0000000000000000000000000000000000000000000000000000000000000064&quot;, 0)\n let address = from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n\n let tx_in = new_tx_input(output_reference, address)\n ```","url":"tx_util/builder/txn.html#new_tx_input"},{"doc":"tx_util/builder/txn","title":"with_asset_of_tx_input","content":"with_asset_of_tx_input(\n  input: transaction.Input,\n  asset: assets.Value,\n) -&gt; transaction.Input\n Add an asset to a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; with_asset_of_tx_input(from_lovelace(2_000_000))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId1&quot;, &quot;Nft1&quot;, 1))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId1&quot;, &quot;Token1&quot;, 3_000))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId2&quot;, &quot;Nft2&quot;, 1))\n ```","url":"tx_util/builder/txn.html#with_asset_of_tx_input"},{"doc":"tx_util/builder/txn","title":"set_datum_of_tx_input","content":"set_datum_of_tx_input(\n  input: transaction.Input,\n  datum: transaction.Datum,\n) -&gt; transaction.Input\n Set a datum of a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; set_datum_of_tx_input(InlineDatum(...))\n ```","url":"tx_util/builder/txn.html#set_datum_of_tx_input"},{"doc":"tx_util/builder/txn","title":"attach_ref_script_to_tx_input","content":"attach_ref_script_to_tx_input(\n  input: transaction.Input,\n  ref_script: ScriptHash,\n) -&gt; transaction.Input\n Attach a reference script to a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; attach_ref_script_to_tx_input(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n ```","url":"tx_util/builder/txn.html#attach_ref_script_to_tx_input"},{"doc":"tx_util/builder/txn","title":"remove_ref_script_from_tx_input","content":"remove_ref_script_from_tx_input(input: transaction.Input) -&gt; transaction.Input\n Remove reference script from a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; attach_ref_script_to_tx_input(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n     |&gt; remove_ref_script_from_tx_input()\n ```","url":"tx_util/builder/txn.html#remove_ref_script_from_tx_input"},{"doc":"tx_util/builder/txn","title":"add_tx_ref_input","content":"add_tx_ref_input(tx: Transaction, tx_ref_in: transaction.Input) -&gt; Transaction\n Concat `tx_ref_in` to `Transaction.reference_inputs`.\n The new `tx_ref_in` is placed at the end of the list.\n\n Example,\n ```\n let tx_ref_in = new_tx_input(...)\n     |&gt; set_datum_of_tx_input(...)\n     |&gt; attach_ref_script_to_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_ref_input(tx_ref_in)\n ```","url":"tx_util/builder/txn.html#add_tx_ref_input"},{"doc":"tx_util/builder/txn","title":"add_tx_output","content":"add_tx_output(tx: Transaction, tx_out: transaction.Output) -&gt; Transaction\n Concat `tx_out` to `Transaction.outputs`.\n The new `tx_out` is placed at the end of the list.\n\n Example,\n ```\n let tx_out = new_tx_output(...)\n     |&gt; set_datum_of_tx_output(...)\n     |&gt; attach_ref_script_to_tx_output(...)\n     |&gt; add_asset_to_tx_output(...)\n     |&gt; add_asset_to_tx_output(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_output(tx_out)\n ```","url":"tx_util/builder/txn.html#add_tx_output"},{"doc":"tx_util/builder/txn","title":"new_tx_output","content":"new_tx_output(address: Address) -&gt; transaction.Output\n Initialize a transaction output with zero assets value, no datum, and no reference script.\n\n Example,\n ```\n let address = from_script(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n let tx_out = new_tx_output(address)\n ```","url":"tx_util/builder/txn.html#new_tx_output"},{"doc":"tx_util/builder/txn","title":"add_asset_to_tx_output","content":"add_asset_to_tx_output(\n  output: transaction.Output,\n  asset: assets.Value,\n) -&gt; transaction.Output\n Add an asset to a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; add_asset_to_tx_output(from_lovelace(2_000_000))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId1&quot;, &quot;Nft1&quot;, 1))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId1&quot;, &quot;Token1&quot;, 3_000))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId2&quot;, &quot;Nft2&quot;, 1))\n ```","url":"tx_util/builder/txn.html#add_asset_to_tx_output"},{"doc":"tx_util/builder/txn","title":"set_datum_of_tx_output","content":"set_datum_of_tx_output(\n  output: transaction.Output,\n  datum: transaction.Datum,\n) -&gt; transaction.Output\n Set a datum of a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; set_datum_of_tx_output(InlineDatum(...))\n ```","url":"tx_util/builder/txn.html#set_datum_of_tx_output"},{"doc":"tx_util/builder/txn","title":"attach_ref_script_to_tx_output","content":"attach_ref_script_to_tx_output(\n  output: transaction.Output,\n  ref_script: ScriptHash,\n) -&gt; transaction.Output\n Attach a reference script to a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; attach_ref_script_to_tx_output(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n ```","url":"tx_util/builder/txn.html#attach_ref_script_to_tx_output"},{"doc":"tx_util/builder/txn","title":"remove_ref_script_from_tx_output","content":"remove_ref_script_from_tx_output(\n  output: transaction.Output,\n) -&gt; transaction.Output\n Remove reference script from a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; attach_ref_script_to_tx_output(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n     |&gt; remove_ref_script_from_tx_output()\n ```","url":"tx_util/builder/txn.html#remove_ref_script_from_tx_output"},{"doc":"tx_util/builder/txn","title":"add_mint","content":"add_mint(tx: Transaction, asset: assets.Value) -&gt; Transaction\n Merge `asset` to `Transaction.mint`","url":"tx_util/builder/txn.html#add_mint"},{"doc":"tx_util/builder/txn","title":"add_certificate","content":"add_certificate(tx: Transaction, certificate: Certificate) -&gt; Transaction\n Concat `certificate` to `Transaction.certificates`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_certificate"},{"doc":"tx_util/builder/txn","title":"add_withdrawal","content":"add_withdrawal(\n  tx: Transaction,\n  withdrawal_key: address.Credential,\n  withdrawal_value: assets.Lovelace,\n) -&gt; Transaction\n Merge `withdrawal` to `Transaction.withdrawals`","url":"tx_util/builder/txn.html#add_withdrawal"},{"doc":"tx_util/builder/txn","title":"add_signatory","content":"add_signatory(tx: Transaction, signatory: VerificationKeyHash) -&gt; Transaction\n Concat `signatory` to `Transaction.extra_signatories`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_signatory"},{"doc":"tx_util/builder/txn","title":"add_datum","content":"add_datum(\n  tx: Transaction,\n  datum_key: DataHash,\n  datum_value: Data,\n) -&gt; Transaction\n Insert `datum` to `Transaction.datums`.\n If the key already exists, its value is overridden.","url":"tx_util/builder/txn.html#add_datum"},{"doc":"tx_util/builder/txn","title":"add_redeemer","content":"add_redeemer(\n  tx: Transaction,\n  redeemer_key: ScriptPurpose,\n  redeemer_value: transaction.Redeemer,\n) -&gt; Transaction\n Repsert `redeemer` to `Transaction.redeemers`.\n If the key already exists, its value is replaced.","url":"tx_util/builder/txn.html#add_redeemer"},{"doc":"tx_util/builder/txn","title":"add_vote","content":"add_vote(\n  tx: Transaction,\n  vote_key: governance.Voter,\n  vote_value: Pairs&lt;GovernanceActionId, governance.Vote&gt;,\n) -&gt; Transaction\n Repsert `vote` to `Transaction.votes`.\n If the key already exists, its value is replaced.","url":"tx_util/builder/txn.html#add_vote"},{"doc":"tx_util/builder/txn","title":"add_proposal_procedure","content":"add_proposal_procedure(\n  tx: Transaction,\n  deposit: assets.Lovelace,\n  return_address: address.Credential,\n  governance_action: GovernanceAction,\n) -&gt; Transaction\n Concat `proposal_procedure` to `Transaction.proposal_procedures`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_proposal_procedure"},{"doc":"tx_util/builder/txn","title":"set_current_treasury_amount","content":"set_current_treasury_amount(\n  tx: Transaction,\n  amount: assets.Lovelace,\n) -&gt; Transaction\n Set `Transaction.current_treasury_amount`","url":"tx_util/builder/txn.html#set_current_treasury_amount"},{"doc":"tx_util/builder/txn","title":"unset_current_treasury_amount","content":"unset_current_treasury_amount(tx: Transaction) -&gt; Transaction\n Unset `Transaction.current_treasury_amount`","url":"tx_util/builder/txn.html#unset_current_treasury_amount"},{"doc":"tx_util/builder/txn","title":"set_treasury_donation","content":"set_treasury_donation(tx: Transaction, donation: assets.Lovelace) -&gt; Transaction\n Set `Transaction.treasury_donation`","url":"tx_util/builder/txn.html#set_treasury_donation"},{"doc":"tx_util/builder/txn","title":"unset_treasury_donation","content":"unset_treasury_donation(tx: Transaction) -&gt; Transaction\n Unset `Transaction.treasury_donation`","url":"tx_util/builder/txn.html#unset_treasury_donation"},{"doc":"tx_util/builder/txn","title":"tx_util/builder/txn","content":" Usage example,\n ```\n test positive_case() {\n   // Arrange:\n   let nft = from_asset(&quot;NftPolicy&quot;, &quot;NftName&quot;, 1)\n   let token = from_asset(&quot;TokenPolicy&quot;, &quot;TokenName&quot;, 10)\n   // use cardano/assets.{from_asset}\n   let asset_1 = from_asset(&quot;AssetPolicy1&quot;, &quot;AssetName1&quot;, 1)\n   let asset_2 = from_asset(&quot;AssetPolicy2&quot;, &quot;AssetName2&quot;, 1000)\n   let asset_2_partial = from_asset(&quot;AssetPolicy2&quot;, &quot;AssetName2&quot;, 100)\n\n   // tx_util/builder/txn:\n   let tx_ref_in =\n     new_tx_input(\n       output_reference: OutputReference(&quot;TxRefInHash&quot;, 0),\n       address: &quot;VerificationKeyHash&quot; |&gt; from_verification_key,\n     )\n       |&gt; with_asset_of_tx_input(2_000_000 |&gt; from_lovelace)\n       |&gt; with_asset_of_tx_input(token)\n\n   let tx_in =\n     new_tx_input(\n       output_reference: OutputReference(&quot;TxInHash&quot;, 1),\n       address: &quot;ScriptHash&quot; |&gt; from_script,\n     )\n       |&gt; set_datum_of_tx_input(&quot;OldDatum&quot; |&gt; InlineDatum)\n       |&gt; with_asset_of_tx_input(4_000_000 |&gt; from_lovelace)\n       |&gt; with_asset_of_tx_input(nft)\n       |&gt; with_asset_of_tx_input(asset_1)\n       |&gt; with_asset_of_tx_input(asset_2)\n\n   let tx_out =\n     new_tx_output(address: &quot;ValidatorHash&quot; |&gt; from_script)\n       |&gt; set_datum_of_tx_output(&quot;NewDatum&quot; |&gt; InlineDatum)\n       |&gt; add_asset_to_tx_output(4_000_000 |&gt; from_lovelace)\n       |&gt; add_asset_to_tx_output(nft)\n       |&gt; add_asset_to_tx_output(asset_1)\n       |&gt; add_asset_to_tx_output(asset_2_partial)\n\n   let tx =\n     transaction.placeholder\n       |&gt; add_tx_ref_input(tx_ref_in)\n       |&gt; add_tx_input(tx_in)\n       |&gt; add_tx_output(tx_out)\n       |&gt; add_signatory(&quot;PubKeyHash&quot;)\n\n   // Trace:\n   trace @&quot;Tx&quot;: tx\n\n   // Assert:\n   vallidator.validate.spend(None, Void, output_reference, tx)\n }\n ```","url":"tx_util/builder/txn.html"}]);