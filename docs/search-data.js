window.Aiken.initSearch([{"doc":"tx_util/mock","title":"mock_hash","content":"mock_hash(from: Any, size: Int) -&gt; ByteArray\n Mocks any hash. You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n The second parameter, `size: Int`, determines the byte length of the resulting mock hash.\n Smaller size than the length of the `from` argument will NOT truncate it,\n but 0 or negative size may cause panic or an unexpected behavior!\n\n Usage examples:\n ```aiken\n mock_hash(1, 2) == #&quot;0001&quot;\n mock_hash(345, 6) == #&quot;000000000345&quot;\n mock_hash(#&quot;af&quot;, 4) == #&quot;000000af&quot;\n mock_hash(&quot;Abc&quot;, 3) == #&quot;416263&quot;\n mock_hash(True, 5) == #&quot;0000D87A80&quot;\n mock_hash(None, 7) == #&quot;00000000D87A80&quot;\n mock_hash(Void, 1) == #&quot;D87980&quot;\n mock_hash(Never, 1) == #&quot;D87A80&quot;\n mock_hash(Never, 0) == #&quot;D87A80&quot;\n mock_hash([], 1) == #&quot;80&quot;\n mock_hash([], 0) == #&quot;80&quot;\n mock_hash([], -1) == #&quot;80&quot;\n ```","url":"tx_util/mock.html#mock_hash"},{"doc":"tx_util/mock","title":"mock_hash_from_bytearray","content":"mock_hash_from_bytearray(bs: ByteArray, size: Int) -&gt; ByteArray\n Mocks any hash from [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray).\n\n The second parameter, `size: Int`, determines the byte length of the resulting mock hash.\n Smaller size than the length of the `from` argument will NOT truncate it.\n\n Usage examples:\n ```aiken\n mock_hash_from_bytearray(#&quot;af&quot;, 4) == #&quot;000000af&quot;\n mock_hash_from_bytearray(&quot;Abc&quot;, 3) == #&quot;416263&quot;\n mock_hash_from_bytearray(#&quot;af&quot;, 2) == #&quot;00af&quot;\n mock_hash_from_bytearray(&quot;Abc&quot;, 1) == #&quot;416263&quot;\n mock_hash_from_bytearray(#&quot;af&quot;, 0) == #&quot;af&quot;\n mock_hash_from_bytearray(&quot;Abc&quot;, -1) == #&quot;416263&quot;\n ```","url":"tx_util/mock.html#mock_hash_from_bytearray"},{"doc":"tx_util/mock","title":"mock_hash_from_int","content":"mock_hash_from_int(i: Int, size: Int) -&gt; ByteArray\n Mocks any hash from [`Int`](https://aiken-lang.org/language-tour/primitive-types#int).\n\n &gt; [!IMPORTANT]\n &gt; NEGATIVE value for the first parameter is acceptable,\n &gt; but combined with 0 or less second argument value may\n &gt; cause panic or an unexpected behavior!\n\n Usage examples:\n ```aiken\n mock_hash_from_int(1, 2) == #&quot;0001&quot;\n mock_hash_from_int(345, 6) == #&quot;000000000345&quot;\n mock_hash_from_int(1, 0) == #&quot;01&quot;\n mock_hash_from_int(345, 0) == #&quot;0345&quot;\n mock_hash_from_int(1, -2) =&gt; ðŸ’¥\n mock_hash_from_int(345, -6) =&gt; ðŸ’¥\n mock_hash_from_int(-1, 2) == #&quot;9999&quot;\n mock_hash_from_int(-345, 6) == #&quot;999999999655&quot;\n ```","url":"tx_util/mock.html#mock_hash_from_int"},{"doc":"tx_util/mock","title":"mock_blake2b_224","content":"mock_blake2b_224(from: Any) -&gt; Hash&lt;Blake2b_224, ByteArray&gt;\n Mocks a Blake2b-224 Hash. It is 28-byte long.\n This function is not meant to be called directly,\n although there&#39;s no restriction.\n It is used by:\n - [`mock_verification_key_hash`](#mock_verification_key_hash)\n - [`mock_script_hash`](#mock_script_hash)\n - [`mock_policy_id`](#mock_policy_id)","url":"tx_util/mock.html#mock_blake2b_224"},{"doc":"tx_util/mock","title":"mock_blake2b_256","content":"mock_blake2b_256(from: Any) -&gt; Hash&lt;Blake2b_256, ByteArray&gt;\n Mocks a Blake2b-256 Hash. It is 32-byte long.\n This function is not meant to be called directly,\n although there&#39;s no restriction.\n It is used by:\n - [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_blake2b_256"},{"doc":"tx_util/mock","title":"mock_address","content":"mock_address(from_payment: Any, from_stake: Any) -&gt; Address\n Mocks an [`Address`](https://aiken-lang.github.io/stdlib/cardano/address.html#Address)\n with `VerificationKey` payment and stake credentials.\n You can pass any serializable data type for both the `from_payment` and `from_stake` arguments.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n let address_key = mock_address(123, False) // if 2nd arg is False | Void | [] | &quot;&quot; | 0, then there&#39;s no staking part\n address_key == from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n // use cardano/address.{from_verification_key, with_delegation_key}\n let address_key_key = mock_address(456, 789)\n address_key_key == (\n   from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000456&quot;)\n     |&gt; with_delegation_key(#&quot;00000000000000000000000000000000000000000000000000000789&quot;)\n )\n ```\n\n &gt; [!NOTE]\n &gt; `from_payment` and `from_stake` can have different data types. If `from_stake` is `False` | `Void` | `[]` | `&quot;&quot;` | `0`,\n &gt; then there&#39;s no staking part (`stake_credential: None`)","url":"tx_util/mock.html#mock_address"},{"doc":"tx_util/mock","title":"mock_script_address","content":"mock_script_address(from_payment: Any, from_stake: Any) -&gt; Address\n Similar to [`mock_address`](#mock_address), but with `Script` payment and stake credentials.\n You can pass any serializable data type for both the `from_payment` and `from_stake` arguments.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n let address_script = mock_script_address(123, Void)\n address_script == from_script(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n // use cardano/address.{from_script, with_delegation_script}\n let address_script_script = mock_script_address(456, 789)\n address_script_script == (\n   from_script(#&quot;00000000000000000000000000000000000000000000000000000456&quot;)\n     |&gt; with_delegation_script(#&quot;00000000000000000000000000000000000000000000000000000789&quot;)\n )\n ```\n\n &gt; [!NOTE]\n &gt; `from_payment` and `from_stake` can have different data types. If `from_stake` is `False` | `Void` | `[]` | `&quot;&quot;` | `0`,\n &gt; then there&#39;s no staking part (`stake_credential: None`)","url":"tx_util/mock.html#mock_script_address"},{"doc":"tx_util/mock","title":"mock_address_with_delegation_script","content":"mock_address_with_delegation_script(\n  from_payment: Any,\n  from_stake: Any,\n) -&gt; Address\n Similar to [`mock_address`](#mock_address), but with `Script` stake credential,\n and the staking part (`stake_credential`) will NEVER be `None`.\n You can pass any serializable data type for both the `from_payment` and `from_stake` arguments.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n let address_key_script = mock_address_with_delegation_script(123, 456)\n address_key_script == (\n   from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n     |&gt; with_delegation_script(#&quot;00000000000000000000000000000000000000000000000000000456&quot;)\n )\n // use cardano/address.{from_verification_key, with_delegation_script}\n ```","url":"tx_util/mock.html#mock_address_with_delegation_script"},{"doc":"tx_util/mock","title":"mock_script_address_with_delegation_key","content":"mock_script_address_with_delegation_key(\n  from_payment: Any,\n  from_stake: Any,\n) -&gt; Address\n Similar to [`mock_address_with_delegation_script`](#mock_address_with_delegation_script),\n but it&#39;s the other way around. The payment part is `Script` credential, and the staking part is\n `VerificationKey` credential. The staking part (`stake_credential`) will NEVER be `None`.\n You can pass any serializable data type for both the `from_payment` and `from_stake` arguments.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n let address_script_key = mock_script_address_with_delegation_key(123, 456)\n address_script_key == (\n   from_script(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n     |&gt; with_delegation_key(#&quot;00000000000000000000000000000000000000000000000000000456&quot;)\n )\n // use cardano/address.{from_script, with_delegation_key}\n ```","url":"tx_util/mock.html#mock_script_address_with_delegation_key"},{"doc":"tx_util/mock","title":"mock_address_from_verification_key","content":"mock_address_from_verification_key(from: Any) -&gt; Address\n Constructs an [`Address`](https://aiken-lang.github.io/stdlib/cardano/address.html#Address)\n from a mock verification key hash. The resulting address has no delegation rights.\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n mock_address_from_verification_key(1) == mock_address(1, 0)\n ```","url":"tx_util/mock.html#mock_address_from_verification_key"},{"doc":"tx_util/mock","title":"mock_address_from_script","content":"mock_address_from_script(from: Any) -&gt; Address\n Constructs an [`Address`](https://aiken-lang.github.io/stdlib/cardano/address.html#Address)\n from a mock script hash. The address has no delegation rights.\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n mock_address_from_script(2) == mock_script_address(2, 0)\n ```","url":"tx_util/mock.html#mock_address_from_script"},{"doc":"tx_util/mock","title":"with_mock_delegation_key","content":"with_mock_delegation_key(address: Address, from: Any) -&gt; Address\n Sets the delegation part of an [`Address`](https://aiken-lang.github.io/stdlib/cardano/address.html#Address)\n using a mock verification key hash. This is useful when combined with [`mock_address_from_verification_key`](#mock_address_from_verification_key)\n or [`mock_address_from_script`](#mock_address_from_script). You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n (mock_address_from_verification_key(3)\n   |&gt; with_mock_delegation_key(4)\n ) == mock_address(3, 4)\n \n (mock_address_from_script(3)\n   |&gt; with_mock_delegation_key(4)\n ) == mock_script_address_with_delegation_key(3, 4)\n ```","url":"tx_util/mock.html#with_mock_delegation_key"},{"doc":"tx_util/mock","title":"with_mock_delegation_script","content":"with_mock_delegation_script(address: Address, from: Any) -&gt; Address\n Sets the delegation part of an [`Address`](https://aiken-lang.github.io/stdlib/cardano/address.html#Address)\n using a mock script hash. This is useful when combined with [`mock_address_from_verification_key`](#mock_address_from_verification_key)\n or [`mock_address_from_script`](#mock_address_from_script). You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n (mock_address_from_verification_key(5)\n   |&gt; with_mock_delegation_script(6)\n ) == mock_address_with_delegation_script(5, 6)\n \n (mock_address_from_script(5)\n   |&gt; with_mock_delegation_script(6)\n ) == mock_script_address(5, 6)\n ```","url":"tx_util/mock.html#with_mock_delegation_script"},{"doc":"tx_util/mock","title":"mock_verification_key_credential","content":"mock_verification_key_credential(from: Any) -&gt; Credential\n Mocks a `VerificationKey` credential. You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n mock_verification_key_credential(1) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000000001&quot;)\n mock_verification_key_credential(123) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n mock_verification_key_credential(#&quot;af&quot;) == VerificationKey(#&quot;000000000000000000000000000000000000000000000000000000af&quot;)\n mock_verification_key_credential(&quot;Abc&quot;) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000416263&quot;)\n mock_verification_key_credential(True) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_verification_key_credential(None) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_verification_key_credential(Void) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000D87980&quot;)\n mock_verification_key_credential(Never) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_verification_key_credential([]) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000000080&quot;)\n // use cardano/address.{VerificationKey}\n ```","url":"tx_util/mock.html#mock_verification_key_credential"},{"doc":"tx_util/mock","title":"mock_script_credential","content":"mock_script_credential(from: Any) -&gt; Credential\n Mocks a `Script` credential. You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n mock_script_credential(1) == Script(#&quot;00000000000000000000000000000000000000000000000000000001&quot;)\n mock_script_credential(123) == Script(#&quot;00000000000000000000000000000000000000000000000000000123&quot;)\n mock_script_credential(#&quot;af&quot;) == Script(#&quot;000000000000000000000000000000000000000000000000000000af&quot;)\n mock_script_credential(&quot;Abc&quot;) == Script(#&quot;00000000000000000000000000000000000000000000000000416263&quot;)\n mock_script_credential(True) == Script(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_script_credential(None) == Script(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_script_credential(Void) == Script(#&quot;00000000000000000000000000000000000000000000000000D87980&quot;)\n mock_script_credential(Never) == Script(#&quot;00000000000000000000000000000000000000000000000000D87A80&quot;)\n mock_script_credential([]) == Script(#&quot;00000000000000000000000000000000000000000000000000000080&quot;)\n // use cardano/address.{Script}\n ```","url":"tx_util/mock.html#mock_script_credential"},{"doc":"tx_util/mock","title":"mock_verification_key_hash","content":"mock_verification_key_hash(from: Any) -&gt; VerificationKeyHash\n Mocks a [`VerificationKeyHash`](https://aiken-lang.github.io/stdlib/aiken/crypto.html#VerificationKeyHash).\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n mock_verification_key_hash(1) == #&quot;00000000000000000000000000000000000000000000000000000001&quot;\n mock_verification_key_hash(123) == #&quot;00000000000000000000000000000000000000000000000000000123&quot;\n mock_verification_key_hash(#&quot;af&quot;) == #&quot;000000000000000000000000000000000000000000000000000000af&quot;\n mock_verification_key_hash(&quot;Abc&quot;) == #&quot;00000000000000000000000000000000000000000000000000416263&quot;\n mock_verification_key_hash(True) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_verification_key_hash(None) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_verification_key_hash(Void) == #&quot;00000000000000000000000000000000000000000000000000D87980&quot;\n mock_verification_key_hash(Never) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_verification_key_hash([]) == #&quot;00000000000000000000000000000000000000000000000000000080&quot;\n ```\n \n Alias: [`mock_vkh`](#mock_vkh)","url":"tx_util/mock.html#mock_verification_key_hash"},{"doc":"tx_util/mock","title":"mock_vkh","content":"mock_vkh(from: Any) -&gt; VerificationKeyHash\n See: [`mock_verification_key_hash`](#mock_verification_key_hash)","url":"tx_util/mock.html#mock_vkh"},{"doc":"tx_util/mock","title":"mock_script_hash","content":"mock_script_hash(from: Any) -&gt; ScriptHash\n Mocks a [`ScriptHash`](https://aiken-lang.github.io/stdlib/aiken/crypto.html#ScriptHash).\n Under the hood, it&#39;s the same as [`mock_verification_key_hash`](#mock_verification_key_hash)\n or [`mock_vkh`](#mock_vkh). You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage examples:\n ```aiken\n mock_script_hash(1) == #&quot;00000000000000000000000000000000000000000000000000000001&quot;\n mock_script_hash(123) == #&quot;00000000000000000000000000000000000000000000000000000123&quot;\n mock_script_hash(#&quot;af&quot;) == #&quot;000000000000000000000000000000000000000000000000000000af&quot;\n mock_script_hash(&quot;Abc&quot;) == #&quot;00000000000000000000000000000000000000000000000000416263&quot;\n mock_script_hash(True) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_script_hash(None) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_script_hash(Void) == #&quot;00000000000000000000000000000000000000000000000000D87980&quot;\n mock_script_hash(Never) == #&quot;00000000000000000000000000000000000000000000000000D87A80&quot;\n mock_script_hash([]) == #&quot;00000000000000000000000000000000000000000000000000000080&quot;\n ```\n \n Alias: [`mock_sh`](#mock_sh)","url":"tx_util/mock.html#mock_script_hash"},{"doc":"tx_util/mock","title":"mock_sh","content":"mock_sh(from: Any) -&gt; ScriptHash\n See: [`mock_script_hash`](#mock_script_hash)","url":"tx_util/mock.html#mock_sh"},{"doc":"tx_util/mock","title":"mock_asset","content":"mock_asset(from: Any, asset_name: AssetName, quantity: Int) -&gt; Value\n Constructs a [`Value`](https://aiken-lang.github.io/stdlib/cardano/assets.html#Value)\n from a mock [`PolicyId`](#mock_policy_id), [`AssetName`](https://aiken-lang.github.io/stdlib/cardano/assets.html#AssetName)\n and a given `quantity`. You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n mock_asset(&quot;PolicyId&quot;, &quot;NFT&quot;, 1)\n   |&gt; add(#&quot;0000000000000000000000000000000000000000506F6C6963794964&quot;, &quot;NFT&quot;, -1)\n   |&gt; is_zero() // True\n // use cardano/assets.{add, is_zero}\n ```\n\n &gt; [!NOTE]\n &gt; You can also only mock the Policy ID, see: [`mock_policy_id`](#mock_policy_id)","url":"tx_util/mock.html#mock_asset"},{"doc":"tx_util/mock","title":"mock_policy_id","content":"mock_policy_id(from: Any) -&gt; PolicyId\n Mocks a [`PolicyId`](https://aiken-lang.github.io/stdlib/cardano/assets.html#PolicyId).\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n from_asset(mock_policy_id(123), &quot;NFT&quot;, 1)\n   |&gt; add(#&quot;00000000000000000000000000000000000000000000000000000123&quot;, &quot;NFT&quot;, -1)\n   |&gt; is_zero() // True\n // use cardano/assets.{from_asset, add, is_zero}\n ```\n \n Alias: [`mock_policy`](#mock_policy)","url":"tx_util/mock.html#mock_policy_id"},{"doc":"tx_util/mock","title":"mock_policy","content":"mock_policy(from: Any) -&gt; PolicyId\n See: [`mock_policy_id`](#mock_policy_id)","url":"tx_util/mock.html#mock_policy"},{"doc":"tx_util/mock","title":"mock_output_reference","content":"mock_output_reference(from: Any, output_index: Int) -&gt; OutputReference\n Mocks an [`OutputReference`](https://aiken-lang.github.io/stdlib/cardano/transaction.html#OutputReference).\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n mock_output_reference(123, 45) == OutputReference {\n   transaction_id: #&quot;0000000000000000000000000000000000000000000000000000000000000123&quot;,\n   output_index: 45,\n }\n // use cardano/transaction.{OutputReference}\n ```\n\n Aliases:\n - [`mock_out_ref`](#mock_out_ref)\n - [`mock_o_ref`](#mock_o_ref)\n\n &gt; [!NOTE]\n &gt; You can also only mock the Transaction ID, see: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_output_reference"},{"doc":"tx_util/mock","title":"mock_out_ref","content":"mock_out_ref(from: Any, output_index: Int) -&gt; OutputReference\n See: [`mock_output_reference`](#mock_output_reference)","url":"tx_util/mock.html#mock_out_ref"},{"doc":"tx_util/mock","title":"mock_o_ref","content":"mock_o_ref(from: Any, output_index: Int) -&gt; OutputReference\n See: [`mock_output_reference`](#mock_output_reference)","url":"tx_util/mock.html#mock_o_ref"},{"doc":"tx_util/mock","title":"mock_transaction_id","content":"mock_transaction_id(from: Any) -&gt; TransactionId\n Mocks a [`TransactionId`](https://aiken-lang.github.io/stdlib/cardano/transaction.html#TransactionId).\n You can pass any serializable data type for the `from` argument.\n\n If the argument data type is [`Int`](https://aiken-lang.org/language-tour/primitive-types#int),\n then it will be processed like: `123` =&gt; `#&quot;00..0123&quot;`.\n\n If the argument data type is [`ByteArray`](https://aiken-lang.org/language-tour/primitive-types#bytearray),\n then it will be processed like: `&quot;Abc&quot;` =&gt; `#&quot;00..00416263&quot;`, `#&quot;af&quot;` =&gt; `#&quot;00..000000af&quot;`.\n\n Otherwise, it will be [serialised](https://aiken-lang.github.io/stdlib/aiken/cbor.html#serialise).\n\n Usage example:\n ```aiken\n OutputReference(mock_transaction_id(1), 0) == mock_output_reference(1, 0)\n // use cardano/transaction.{OutputReference}\n ```\n \n Aliases:\n - [`mock_tran_id`](#mock_tran_id)\n - [`mock_txn_id`](#mock_txn_id)\n - [`mock_tx_id`](#mock_tx_id)\n - [`mock_tx_hash`](#mock_tx_hash)\n - [`mock_txn_hash`](#mock_txn_hash)\n - [`mock_tran_hash`](#mock_tran_hash)\n - [`mock_transaction_hash`](#mock_transaction_hash)","url":"tx_util/mock.html#mock_transaction_id"},{"doc":"tx_util/mock","title":"mock_tran_id","content":"mock_tran_id(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_tran_id"},{"doc":"tx_util/mock","title":"mock_txn_id","content":"mock_txn_id(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_txn_id"},{"doc":"tx_util/mock","title":"mock_tx_id","content":"mock_tx_id(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_tx_id"},{"doc":"tx_util/mock","title":"mock_tx_hash","content":"mock_tx_hash(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_tx_hash"},{"doc":"tx_util/mock","title":"mock_txn_hash","content":"mock_txn_hash(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_txn_hash"},{"doc":"tx_util/mock","title":"mock_tran_hash","content":"mock_tran_hash(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_tran_hash"},{"doc":"tx_util/mock","title":"mock_transaction_hash","content":"mock_transaction_hash(from: Any) -&gt; TransactionId\n See: [`mock_transaction_id`](#mock_transaction_id)","url":"tx_util/mock.html#mock_transaction_hash"},{"doc":"tx_util/mock","title":"Any","content":"Any = Data\n\n","url":"tx_util/mock.html#Any"},{"doc":"tx_util/mock","title":"tx_util/mock","content":" A fancy way to construct mock hashes, such as:\n - [`VerificationKeyHash`](https://aiken-lang.github.io/stdlib/aiken/crypto.html#VerificationKeyHash)\n - [`ScriptHash`](https://aiken-lang.github.io/stdlib/aiken/crypto.html#ScriptHash)\n - [`PolicyId`](https://aiken-lang.github.io/stdlib/cardano/assets.html#PolicyId)\n - [`TransactionId`](https://aiken-lang.github.io/stdlib/cardano/transaction.html#TransactionId)\n - and any other hashes\n\n Usage examples:\n ```aiken\n // Mock Address:\n let address_key = mock_address(1, False) // if 2nd arg is False | Void | [] | &quot;&quot; | 0, then there&#39;s no staking part\n address_key == from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000001&quot;)\n // use cardano/address.{from_verification_key}\n\n // Mock Credential:\n mock_verification_key_credential(2) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000000002&quot;)\n mock_script_credential(3) == Script(#&quot;00000000000000000000000000000000000000000000000000000003&quot;)\n // use cardano/address.{VerificationKey, Script}\n (mock_verification_key_hash(4) |&gt; VerificationKey) == VerificationKey(#&quot;00000000000000000000000000000000000000000000000000000004&quot;)\n (mock_script_hash(5) |&gt; Script) == Script(#&quot;00000000000000000000000000000000000000000000000000000005&quot;)\n \n // Mock Asset:\n let mint = mock_asset(6, &quot;NFT&quot;, 1)\n let burn = from_asset(mock_policy_id(6), &quot;NFT&quot;, -1) // you can also only mock the Policy ID\n mint\n   |&gt; merge(burn)\n   |&gt; is_zero() // True\n // use cardano/assets.{from_asset, merge, is_zero}\n \n // Mock Output Reference:\n let o_ref = mock_output_reference(7, 0) // aliases: mock_out_ref, mock_o_ref\n and {\n   o_ref == OutputReference(mock_transaction_id(7), 0), // you can also only mock the Transaction ID\n   o_ref == OutputReference {\n     transaction_id: #&quot;0000000000000000000000000000000000000000000000000000000000000007&quot;,\n     output_index: 0,\n   },\n }\n // use cardano/transaction.{OutputReference}\n \n // Mock any hash:\n mock_hash(8, 2) == #&quot;0008&quot;\n mock_hash_from_int(9, 3) == #&quot;000009&quot;\n mock_hash_from_bytearray(#&quot;10&quot;, 4) == #&quot;00000010&quot;\n ```\n\n &gt; [!NOTE]\n &gt; Constructing mock hashes this way will add to your Memory and CPU Usages **during testing**!\n &gt; For example: `mock_sh(1)` will generate `#&quot;00000000000000000000000000000000000000000000000000000001&quot;`,\n &gt; but notice the following Memory and CPU Usages.\n &gt; ```aiken\n &gt; /// Aiken v1.1.9 mem: 261806, cpu: 75093536\n &gt; test mock() {\n &gt;   trace mock_sh(1)\n &gt;   True\n &gt; }\n &gt; \n &gt; /// Aiken v1.1.9 mem: 254825, cpu: 71651198\n &gt; test no_mock() {\n &gt;   trace #&quot;00000000000000000000000000000000000000000000000000000001&quot;\n &gt;   True\n &gt; }\n &gt; ```","url":"tx_util/mock.html"},{"doc":"tx_util/builder/txn","title":"set_id","content":"set_id(tx: Transaction, id: TransactionId) -&gt; Transaction\n Set `Transaction.id`.\n The default value is `#&quot;0000000000000000000000000000000000000000000000000000000000000000&quot;`","url":"tx_util/builder/txn.html#set_id"},{"doc":"tx_util/builder/txn","title":"set_validity_range","content":"set_validity_range(\n  tx: Transaction,\n  validity_range: ValidityRange,\n) -&gt; Transaction\n Set `Transaction.validity_range`.\n The default value is `interval.everything`","url":"tx_util/builder/txn.html#set_validity_range"},{"doc":"tx_util/builder/txn","title":"set_fee","content":"set_fee(tx: Transaction, fee: assets.Lovelace) -&gt; Transaction\n Set `Transaction.fee`.\n The default value is `0`","url":"tx_util/builder/txn.html#set_fee"},{"doc":"tx_util/builder/txn","title":"add_tx_input","content":"add_tx_input(tx: Transaction, tx_in: transaction.Input) -&gt; Transaction\n Concat `tx_in` to `Transaction.inputs`.\n The new `tx_in` is placed at the end of the list.\n\n Example,\n ```\n let tx_in = new_tx_input(...)\n     |&gt; set_datum_of_tx_input(...)\n     |&gt; attach_ref_script_to_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_input(tx_in)\n ```","url":"tx_util/builder/txn.html#add_tx_input"},{"doc":"tx_util/builder/txn","title":"new_tx_input","content":"new_tx_input(\n  output_reference: OutputReference,\n  address: Address,\n) -&gt; transaction.Input\n Initialize a transaction input with zero assets value, no datum, and no reference script.\n\n Example,\n ```\n let output_reference = OutputReference(#&quot;0000000000000000000000000000000000000000000000000000000000000064&quot;, 0)\n let address = from_verification_key(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n\n let tx_in = new_tx_input(output_reference, address)\n ```","url":"tx_util/builder/txn.html#new_tx_input"},{"doc":"tx_util/builder/txn","title":"with_asset_of_tx_input","content":"with_asset_of_tx_input(\n  input: transaction.Input,\n  asset: assets.Value,\n) -&gt; transaction.Input\n Add an asset to a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; with_asset_of_tx_input(from_lovelace(2_000_000))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId1&quot;, &quot;Nft1&quot;, 1))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId1&quot;, &quot;Token1&quot;, 3_000))\n     |&gt; with_asset_of_tx_input(from_asset(&quot;PolicyId2&quot;, &quot;Nft2&quot;, 1))\n ```","url":"tx_util/builder/txn.html#with_asset_of_tx_input"},{"doc":"tx_util/builder/txn","title":"set_datum_of_tx_input","content":"set_datum_of_tx_input(\n  input: transaction.Input,\n  datum: transaction.Datum,\n) -&gt; transaction.Input\n Set a datum of a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; set_datum_of_tx_input(InlineDatum(...))\n ```","url":"tx_util/builder/txn.html#set_datum_of_tx_input"},{"doc":"tx_util/builder/txn","title":"attach_ref_script_to_tx_input","content":"attach_ref_script_to_tx_input(\n  input: transaction.Input,\n  ref_script: ScriptHash,\n) -&gt; transaction.Input\n Attach a reference script to a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; attach_ref_script_to_tx_input(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n ```","url":"tx_util/builder/txn.html#attach_ref_script_to_tx_input"},{"doc":"tx_util/builder/txn","title":"remove_ref_script_from_tx_input","content":"remove_ref_script_from_tx_input(input: transaction.Input) -&gt; transaction.Input\n Remove reference script from a transaction input.\n\n Example,\n ```\n let tx_in = new_tx_input(output_reference, address)\n     |&gt; attach_ref_script_to_tx_input(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n     |&gt; remove_ref_script_from_tx_input()\n ```","url":"tx_util/builder/txn.html#remove_ref_script_from_tx_input"},{"doc":"tx_util/builder/txn","title":"add_tx_ref_input","content":"add_tx_ref_input(tx: Transaction, tx_ref_in: transaction.Input) -&gt; Transaction\n Concat `tx_ref_in` to `Transaction.reference_inputs`.\n The new `tx_ref_in` is placed at the end of the list.\n\n Example,\n ```\n let tx_ref_in = new_tx_input(...)\n     |&gt; set_datum_of_tx_input(...)\n     |&gt; attach_ref_script_to_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n     |&gt; with_asset_of_tx_input(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_ref_input(tx_ref_in)\n ```","url":"tx_util/builder/txn.html#add_tx_ref_input"},{"doc":"tx_util/builder/txn","title":"add_tx_output","content":"add_tx_output(tx: Transaction, tx_out: transaction.Output) -&gt; Transaction\n Concat `tx_out` to `Transaction.outputs`.\n The new `tx_out` is placed at the end of the list.\n\n Example,\n ```\n let tx_out = new_tx_output(...)\n     |&gt; set_datum_of_tx_output(...)\n     |&gt; attach_ref_script_to_tx_output(...)\n     |&gt; add_asset_to_tx_output(...)\n     |&gt; add_asset_to_tx_output(...)\n\n let txn = transaction.placeholder\n     |&gt; add_tx_output(tx_out)\n ```","url":"tx_util/builder/txn.html#add_tx_output"},{"doc":"tx_util/builder/txn","title":"new_tx_output","content":"new_tx_output(address: Address) -&gt; transaction.Output\n Initialize a transaction output with zero assets value, no datum, and no reference script.\n\n Example,\n ```\n let address = from_script(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n let tx_out = new_tx_output(address)\n ```","url":"tx_util/builder/txn.html#new_tx_output"},{"doc":"tx_util/builder/txn","title":"add_asset_to_tx_output","content":"add_asset_to_tx_output(\n  output: transaction.Output,\n  asset: assets.Value,\n) -&gt; transaction.Output\n Add an asset to a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; add_asset_to_tx_output(from_lovelace(2_000_000))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId1&quot;, &quot;Nft1&quot;, 1))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId1&quot;, &quot;Token1&quot;, 3_000))\n     |&gt; add_asset_to_tx_output(from_asset(&quot;PolicyId2&quot;, &quot;Nft2&quot;, 1))\n ```","url":"tx_util/builder/txn.html#add_asset_to_tx_output"},{"doc":"tx_util/builder/txn","title":"set_datum_of_tx_output","content":"set_datum_of_tx_output(\n  output: transaction.Output,\n  datum: transaction.Datum,\n) -&gt; transaction.Output\n Set a datum of a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; set_datum_of_tx_output(InlineDatum(...))\n ```","url":"tx_util/builder/txn.html#set_datum_of_tx_output"},{"doc":"tx_util/builder/txn","title":"attach_ref_script_to_tx_output","content":"attach_ref_script_to_tx_output(\n  output: transaction.Output,\n  ref_script: ScriptHash,\n) -&gt; transaction.Output\n Attach a reference script to a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; attach_ref_script_to_tx_output(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n ```","url":"tx_util/builder/txn.html#attach_ref_script_to_tx_output"},{"doc":"tx_util/builder/txn","title":"remove_ref_script_from_tx_output","content":"remove_ref_script_from_tx_output(\n  output: transaction.Output,\n) -&gt; transaction.Output\n Remove reference script from a transaction output.\n\n Example,\n ```\n let tx_out = new_tx_output(address)\n     |&gt; attach_ref_script_to_tx_output(#&quot;00000000000000000000000000000000000000000000000000000056&quot;)\n     |&gt; remove_ref_script_from_tx_output()\n ```","url":"tx_util/builder/txn.html#remove_ref_script_from_tx_output"},{"doc":"tx_util/builder/txn","title":"add_mint","content":"add_mint(tx: Transaction, asset: assets.Value) -&gt; Transaction\n Merge `asset` to `Transaction.mint`","url":"tx_util/builder/txn.html#add_mint"},{"doc":"tx_util/builder/txn","title":"add_certificate","content":"add_certificate(tx: Transaction, certificate: Certificate) -&gt; Transaction\n Concat `certificate` to `Transaction.certificates`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_certificate"},{"doc":"tx_util/builder/txn","title":"add_withdrawal","content":"add_withdrawal(\n  tx: Transaction,\n  withdrawal_key: address.Credential,\n  withdrawal_value: assets.Lovelace,\n) -&gt; Transaction\n Merge `withdrawal` to `Transaction.withdrawals`","url":"tx_util/builder/txn.html#add_withdrawal"},{"doc":"tx_util/builder/txn","title":"add_signatory","content":"add_signatory(tx: Transaction, signatory: VerificationKeyHash) -&gt; Transaction\n Concat `signatory` to `Transaction.extra_signatories`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_signatory"},{"doc":"tx_util/builder/txn","title":"add_datum","content":"add_datum(\n  tx: Transaction,\n  datum_key: DataHash,\n  datum_value: Data,\n) -&gt; Transaction\n Insert `datum` to `Transaction.datums`.\n If the key already exists, its value is overridden.","url":"tx_util/builder/txn.html#add_datum"},{"doc":"tx_util/builder/txn","title":"add_redeemer","content":"add_redeemer(\n  tx: Transaction,\n  redeemer_key: ScriptPurpose,\n  redeemer_value: transaction.Redeemer,\n) -&gt; Transaction\n Repsert `redeemer` to `Transaction.redeemers`.\n If the key already exists, its value is replaced.","url":"tx_util/builder/txn.html#add_redeemer"},{"doc":"tx_util/builder/txn","title":"add_vote","content":"add_vote(\n  tx: Transaction,\n  vote_key: governance.Voter,\n  vote_value: Pairs&lt;GovernanceActionId, governance.Vote&gt;,\n) -&gt; Transaction\n Repsert `vote` to `Transaction.votes`.\n If the key already exists, its value is replaced.","url":"tx_util/builder/txn.html#add_vote"},{"doc":"tx_util/builder/txn","title":"add_proposal_procedure","content":"add_proposal_procedure(\n  tx: Transaction,\n  deposit: assets.Lovelace,\n  return_address: address.Credential,\n  governance_action: GovernanceAction,\n) -&gt; Transaction\n Concat `proposal_procedure` to `Transaction.proposal_procedures`.\n The new value is placed at the end of the list.","url":"tx_util/builder/txn.html#add_proposal_procedure"},{"doc":"tx_util/builder/txn","title":"set_current_treasury_amount","content":"set_current_treasury_amount(\n  tx: Transaction,\n  amount: assets.Lovelace,\n) -&gt; Transaction\n Set `Transaction.current_treasury_amount`","url":"tx_util/builder/txn.html#set_current_treasury_amount"},{"doc":"tx_util/builder/txn","title":"unset_current_treasury_amount","content":"unset_current_treasury_amount(tx: Transaction) -&gt; Transaction\n Unset `Transaction.current_treasury_amount`","url":"tx_util/builder/txn.html#unset_current_treasury_amount"},{"doc":"tx_util/builder/txn","title":"set_treasury_donation","content":"set_treasury_donation(tx: Transaction, donation: assets.Lovelace) -&gt; Transaction\n Set `Transaction.treasury_donation`","url":"tx_util/builder/txn.html#set_treasury_donation"},{"doc":"tx_util/builder/txn","title":"unset_treasury_donation","content":"unset_treasury_donation(tx: Transaction) -&gt; Transaction\n Unset `Transaction.treasury_donation`","url":"tx_util/builder/txn.html#unset_treasury_donation"},{"doc":"tx_util/builder/txn","title":"tx_util/builder/txn","content":" Usage example:\n ```\n test positive_case() {\n   // Arrange:\n   let nft = from_asset(&quot;NftPolicy&quot;, &quot;NftName&quot;, 1)\n   let token = from_asset(&quot;TokenPolicy&quot;, &quot;TokenName&quot;, 10)\n   // use cardano/assets.{from_asset}\n   let asset_1 = from_asset(&quot;AssetPolicy1&quot;, &quot;AssetName1&quot;, 1)\n   let asset_2 = from_asset(&quot;AssetPolicy2&quot;, &quot;AssetName2&quot;, 1000)\n   let asset_2_partial = from_asset(&quot;AssetPolicy2&quot;, &quot;AssetName2&quot;, 100)\n\n   // tx_util/builder/txn:\n   let tx_ref_in =\n     new_tx_input(\n       output_reference: OutputReference(&quot;TxRefInHash&quot;, 0),\n       address: &quot;VerificationKeyHash&quot; |&gt; from_verification_key,\n     )\n       |&gt; with_asset_of_tx_input(2_000_000 |&gt; from_lovelace)\n       |&gt; with_asset_of_tx_input(token)\n\n   let tx_in =\n     new_tx_input(\n       output_reference: OutputReference(&quot;TxInHash&quot;, 1),\n       address: &quot;ScriptHash&quot; |&gt; from_script,\n     )\n       |&gt; set_datum_of_tx_input(&quot;OldDatum&quot; |&gt; InlineDatum)\n       |&gt; with_asset_of_tx_input(4_000_000 |&gt; from_lovelace)\n       |&gt; with_asset_of_tx_input(nft)\n       |&gt; with_asset_of_tx_input(asset_1)\n       |&gt; with_asset_of_tx_input(asset_2)\n\n   let tx_out =\n     new_tx_output(address: &quot;ValidatorHash&quot; |&gt; from_script)\n       |&gt; set_datum_of_tx_output(&quot;NewDatum&quot; |&gt; InlineDatum)\n       |&gt; add_asset_to_tx_output(4_000_000 |&gt; from_lovelace)\n       |&gt; add_asset_to_tx_output(nft)\n       |&gt; add_asset_to_tx_output(asset_1)\n       |&gt; add_asset_to_tx_output(asset_2_partial)\n\n   let tx =\n     transaction.placeholder\n       |&gt; add_tx_ref_input(tx_ref_in)\n       |&gt; add_tx_input(tx_in)\n       |&gt; add_tx_output(tx_out)\n       |&gt; add_signatory(&quot;PubKeyHash&quot;)\n\n   // Trace:\n   trace @&quot;Tx&quot;: tx\n\n   // Assert:\n   validator.validate.spend(None, Void, output_reference, tx)\n }\n ```","url":"tx_util/builder/txn.html"},{"doc":"tx_util/builder","title":"build_context","content":"build_context(\n  validity_range: Interval&lt;Int&gt;,\n  redeemer: transaction.Redeemer,\n) -&gt; ScriptContext\n The initial function that serves as the starting point to construct `ScriptContext`\n\n Example,\n ```\n let ctx = after(now) |&gt; build_context(&quot;Redeemer&quot;)\n ```","url":"tx_util/builder.html#build_context"},{"doc":"tx_util/builder","title":"mint_assets","content":"mint_assets(\n  ctx: ScriptContext,\n  policy_id: PolicyId,\n  assets: assets.Value,\n) -&gt; ScriptContext\n Set `Minting(policy_id)` to `ScriptContext.info`\n and `assets` to `ScriptContext.transaction.mint`","url":"tx_util/builder.html#mint_assets"},{"doc":"tx_util/builder","title":"spend_utxo","content":"spend_utxo(\n  ctx: ScriptContext,\n  utxo: OutputReference,\n  datum: Option&lt;Data&gt;,\n) -&gt; ScriptContext\n Set `Spending(utxo, datum)` to `ScriptContext.info`","url":"tx_util/builder.html#spend_utxo"},{"doc":"tx_util/builder","title":"withdraw_stake_rewards","content":"withdraw_stake_rewards(\n  ctx: ScriptContext,\n  credential: address.Credential,\n) -&gt; ScriptContext\n Set `Withdrawing(credential)` to `ScriptContext.info`\n and `[Pair(credential, 0)]` to `ScriptContext.transaction.withdrawals`","url":"tx_util/builder.html#withdraw_stake_rewards"},{"doc":"tx_util/builder","title":"publish_certificate","content":"publish_certificate(\n  ctx: ScriptContext,\n  certificate: Certificate,\n  at: collection.Index,\n) -&gt; ScriptContext\n Set `Publishing(at, certificate)` to `ScriptContext.info`","url":"tx_util/builder.html#publish_certificate"},{"doc":"tx_util/builder","title":"vote_governance","content":"vote_governance(ctx: ScriptContext, voter: governance.Voter) -&gt; ScriptContext\n Set `Voting(voter)` to `ScriptContext.info`\n and `[Pair(voter, [])]` to `ScriptContext.transaction.votes`","url":"tx_util/builder.html#vote_governance"},{"doc":"tx_util/builder","title":"propose_procedure","content":"propose_procedure(\n  ctx: ScriptContext,\n  proposal_procedure: ProposalProcedure,\n  at: collection.Index,\n) -&gt; ScriptContext\n Set `Proposing(at, proposal_procedure)` to `ScriptContext.info`\n and `[proposal_procedure]` to `ScriptContext.transaction.proposal_procedures`","url":"tx_util/builder.html#propose_procedure"},{"doc":"tx_util/builder","title":"set_transaction","content":"set_transaction(ctx: ScriptContext, tx: Transaction) -&gt; ScriptContext\n Set `tx` to `ScriptContext.transaction`","url":"tx_util/builder.html#set_transaction"},{"doc":"tx_util/builder","title":"tx_util/builder","content":" Usage example:\n ```\n test negative_case() fail {\n   // Arrange:\n   let ctx = interval.empty\n     |&gt; build_context(&quot;Redeemer&quot;)\n     |&gt; vote_governance(&quot;VerificationKeyHash&quot; |&gt; StakePool)\n\n   ...\n\n   // tx_util/builder/txn:\n   let tx = ctx.transaction\n     |&gt; add_tx_input(tx_in)\n     |&gt; add_tx_output(tx_out)\n\n   // Assert:\n   ctx\n     |&gt; set_transaction(tx)\n     |&gt; validator.validate.else\n }\n ```","url":"tx_util/builder.html"}]);